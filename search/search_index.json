{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ScopeHunter \ue157 Overview \ue157 This is a simple plugin that can get the scope under the cursor(s) in Sublime Text. This plugin is useful for plugin development. Dark theme with simple output: Light theme with advanced output: Features \ue157 All features are configurable via the settings file Optionally show output in tooltip (stylesheets are configurable). Optionally auto choose dark or light tooltip theme depending on your color scheme. Optionally dump output to auto-popup panel and/or console. Optionally dump scope to status bar (no multi-select support). Multi-select support for all output except status bar. Optionally log scope extent in line/char format and/or point format. Optionally copy scope(s) to clipboard. Optionally highlight and/or log scope extent. Optionally log color scheme colors and selectors. Optionally log location of Scheme file and Syntax. Supports SubNotify messages.","title":"About ScopeHunter"},{"location":"#scopehunter","text":"","title":"ScopeHunter"},{"location":"#overview","text":"This is a simple plugin that can get the scope under the cursor(s) in Sublime Text. This plugin is useful for plugin development. Dark theme with simple output: Light theme with advanced output:","title":"Overview"},{"location":"#features","text":"All features are configurable via the settings file Optionally show output in tooltip (stylesheets are configurable). Optionally auto choose dark or light tooltip theme depending on your color scheme. Optionally dump output to auto-popup panel and/or console. Optionally dump scope to status bar (no multi-select support). Multi-select support for all output except status bar. Optionally log scope extent in line/char format and/or point format. Optionally copy scope(s) to clipboard. Optionally highlight and/or log scope extent. Optionally log color scheme colors and selectors. Optionally log location of Scheme file and Syntax. Supports SubNotify messages.","title":"Features"},{"location":"contributing/","text":"Contributing & Support \ue157 Overview \ue157 Sublime Versions Description ST2 Supported on a separate branch, but not actively. Any further fixes or enhancements must come from the community. Issues for versions less than ST3 will not be addressed moving forward by me. Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull must already exist on the main, actively developed branch. I will not allow an older branch to exceed the main branch in regards to functionality. ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Bug Reports \ue157 Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->RegReplace->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide link to color scheme used (with link if a 3 rd party color scheme) if applicable. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code \ue157 Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests \ue157 Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests \ue157 Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements \ue157 A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"contributing/#overview","text":"Sublime Versions Description ST2 Supported on a separate branch, but not actively. Any further fixes or enhancements must come from the community. Issues for versions less than ST3 will not be addressed moving forward by me. Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull must already exist on the main, actively developed branch. I will not allow an older branch to exceed the main branch in regards to functionality. ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->RegReplace->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide link to color scheme used (with link if a 3 rd party color scheme) if applicable. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"contributing/#running-validation-tests","text":"Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"installation/","text":"Installation \ue157 Package Control \ue157 The recommended way to install ScopeHunter is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press ctrl + shift + p (Win, Linux) or cmd + shift + p (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing ScopeHunter ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation \ue157 Warning This is not the recommended way to install ScopeHunter for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ScopeHunter and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ScopeHunter without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown Download and unpack or git clone the latest ScopeHunter release and unpack as ScopeHunter : facelessuser/ScopeHunter -> ScopeHunter Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy. Git Cloning \ue157 Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/ScopeHunter.git RegReplace Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install ScopeHunter is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press ctrl + shift + p (Win, Linux) or cmd + shift + p (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing ScopeHunter ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install ScopeHunter for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ScopeHunter and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ScopeHunter without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown Download and unpack or git clone the latest ScopeHunter release and unpack as ScopeHunter : facelessuser/ScopeHunter -> ScopeHunter Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/ScopeHunter.git RegReplace Restart Sublime Text.","title":"Git Cloning"},{"location":"license/","text":"License \ue157 Scope Hunter is released under the MIT license. Copyright \u00a9 2012 - 2018 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"Scope Hunter is released under the MIT license. Copyright \u00a9 2012 - 2018 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"usage/","text":"User Guide \ue157 Command Usage \ue157 All commands are accessible via the command palette. Scope Hunter: Show Scope Under Cursor \ue157 Show scope under cursor or cursors (depending whether multi-select is enabled). Scope Hunter: Toggle Instant Scoper \ue157 Toggle scoping under cursor constantly, but only for the current active file view. Scope Hunter: User Settings \ue157 In order to change the standard settings of Scope Hunter, please go to Preferences -> Package Settings -> Scope Hunter and click on Settings - User . Repeat that for Settings - Default , copy all the settings that you wish to change from the default settings to the user settings file. Developer Options \ue157 These settings are for debugging issues. /////////////////////////// // Dev Options /////////////////////////// \"debug\" : false , debug \ue157 Turns on debug logging. View options \ue157 By default, ScopeHunter (on ST3 ) uses the output panel to communicate the scope. But if you prefer a more subtle or flashier way of displaying the scope, ScopeHunter can be configured to do so. /////////////////////////// // View Options /////////////////////////// // Show popup tooltip with info about scope \"show_popup\" : false , // Show scope in status bar \"show_statusbar\" : false , // Show scope in auto-popup panel \"show_panel\" : true , // Show scopes in console \"console_log\" : false , show_popup \ue157 This uses the new ST3 tooltip API to display and is my personal favorite. It shows a styled tooltip with all the information about the scope of the current cursor(s). You get previews of the colors, and you can click links to copy the info to the clipboard. show_statusbar \ue157 This shows just the scope in the status bar. Simple and subtle. show_panel \ue157 This shows the scope and related info in an output panel. This allows a user to directly copy and paste the info from the panel. console_log \ue157 This is useful if you are doing something like show_statusbar . You can keep the output subtle, but you can open the console and get more in depth info that you can copy and paste. Scope Info \ue157 For modes like show_panel , console_log , and show_popup you can control the info displayed. You can keep it just to the scope, or you can extend it show other useful info. /////////////////////////// // Additional Scope Info /////////////////////////// // Show scope extent in point format \"extent_points\" : true , // Show scope extent in line/char format \"extent_line_char\" : true , // Show color and style at the given point \"styling\" : true , // When showing a color with alpha transparency, // Simulate what the color would look like in sublime // by mixing the relevant background color, \"show_simulated_alpha_colors\" : true , // Show the selector names and scopes // responsible for the color and styles \"selectors\" : true , // Show current syntax and color scheme paths // (click to open if using tooltips) \"file_paths\" : true , // Highlight scope extent in view \"highlight_extent\" : true , extent_points \ue157 Show the extent of the scope as view points. extent_line_char \ue157 Show the extent of the scope as line/char or row/col format. highlight_extent \ue157 Highlight the scope extent. styling \ue157 Show not only the color value, but also the scope and text styling. show_simulated_alpha_colors \ue157 When showing color values, ScopeHunter can show the perceived color value of transparent colors. It mixes the transparent foreground with the background giving the color value you are actually seeing. selectors \ue157 This shows the color scheme selectors that are responsible for applying the visible color and styles. file_paths \ue157 Show the file paths of the color scheme and language file that are responsible for giving the styled appearance of your view. In the tooltip, you can click these links and open the responsible file directly in Sublime Text. Scope Highlighting \ue157 When highlight_extent is enabled, this controls the visual style of the highlights. Due to the way the Sublime Text API for highlighting regions works, colors must be described as scope names from your color scheme file. Just define the scope to use and the supported style as shown below. /////////////////////////// // Highlight Configuration /////////////////////////// // Scope to use for the color \"highlight_scope\" : \"invalid\" , // Highlight style (underline|solid|outline|thin_underline|squiggly|stippled) \"highlight_style\" : \"outline\" , Miscellaneous Options \ue157 Lastly, there are a couple of other options: /////////////////////////// // Additional Options /////////////////////////// // Automatically copy scopes to clipboard \"clipboard\" : false , // Allow multi-select scope hunting \"multiselect\" : true , // Max region size to highlight \"highlight_max_size\" : 100 , // Use SubNotify plugin messages if installed \"use_sub_notify\" : true clipboard \ue157 Auto-copies just the scope to the clipboard. multiselect \ue157 Allow displaying of the scope info for multiple cursor selections (does not work for show_statusbar as space is very limited). highlgiht_max_size \ue157 For performance, ScopeHunter is limited to highlight regions less that a given size. If a region is bigger than the defined limit, it will not be highlighted. You can control that limit here. use_sub_notify \ue157 If you have the SubNotify installed, this will enable or disable messages through it.","title":"User Guide"},{"location":"usage/#user-guide","text":"","title":"User Guide"},{"location":"usage/#command-usage","text":"All commands are accessible via the command palette.","title":"Command Usage"},{"location":"usage/#scope-hunter-show-scope-under-cursor","text":"Show scope under cursor or cursors (depending whether multi-select is enabled).","title":"Scope Hunter: Show Scope Under Cursor"},{"location":"usage/#scope-hunter-toggle-instant-scoper","text":"Toggle scoping under cursor constantly, but only for the current active file view.","title":"Scope Hunter: Toggle Instant Scoper"},{"location":"usage/#scope-hunter-user-settings","text":"In order to change the standard settings of Scope Hunter, please go to Preferences -> Package Settings -> Scope Hunter and click on Settings - User . Repeat that for Settings - Default , copy all the settings that you wish to change from the default settings to the user settings file.","title":"Scope Hunter: User Settings"},{"location":"usage/#developer-options","text":"These settings are for debugging issues. /////////////////////////// // Dev Options /////////////////////////// \"debug\" : false ,","title":"Developer Options"},{"location":"usage/#debug","text":"Turns on debug logging.","title":"debug"},{"location":"usage/#view-options","text":"By default, ScopeHunter (on ST3 ) uses the output panel to communicate the scope. But if you prefer a more subtle or flashier way of displaying the scope, ScopeHunter can be configured to do so. /////////////////////////// // View Options /////////////////////////// // Show popup tooltip with info about scope \"show_popup\" : false , // Show scope in status bar \"show_statusbar\" : false , // Show scope in auto-popup panel \"show_panel\" : true , // Show scopes in console \"console_log\" : false ,","title":"View options"},{"location":"usage/#show_popup","text":"This uses the new ST3 tooltip API to display and is my personal favorite. It shows a styled tooltip with all the information about the scope of the current cursor(s). You get previews of the colors, and you can click links to copy the info to the clipboard.","title":"show_popup"},{"location":"usage/#show_statusbar","text":"This shows just the scope in the status bar. Simple and subtle.","title":"show_statusbar"},{"location":"usage/#show_panel","text":"This shows the scope and related info in an output panel. This allows a user to directly copy and paste the info from the panel.","title":"show_panel"},{"location":"usage/#console_log","text":"This is useful if you are doing something like show_statusbar . You can keep the output subtle, but you can open the console and get more in depth info that you can copy and paste.","title":"console_log"},{"location":"usage/#scope-info","text":"For modes like show_panel , console_log , and show_popup you can control the info displayed. You can keep it just to the scope, or you can extend it show other useful info. /////////////////////////// // Additional Scope Info /////////////////////////// // Show scope extent in point format \"extent_points\" : true , // Show scope extent in line/char format \"extent_line_char\" : true , // Show color and style at the given point \"styling\" : true , // When showing a color with alpha transparency, // Simulate what the color would look like in sublime // by mixing the relevant background color, \"show_simulated_alpha_colors\" : true , // Show the selector names and scopes // responsible for the color and styles \"selectors\" : true , // Show current syntax and color scheme paths // (click to open if using tooltips) \"file_paths\" : true , // Highlight scope extent in view \"highlight_extent\" : true ,","title":"Scope Info"},{"location":"usage/#extent_points","text":"Show the extent of the scope as view points.","title":"extent_points"},{"location":"usage/#extent_line_char","text":"Show the extent of the scope as line/char or row/col format.","title":"extent_line_char"},{"location":"usage/#highlight_extent","text":"Highlight the scope extent.","title":"highlight_extent"},{"location":"usage/#styling","text":"Show not only the color value, but also the scope and text styling.","title":"styling"},{"location":"usage/#show_simulated_alpha_colors","text":"When showing color values, ScopeHunter can show the perceived color value of transparent colors. It mixes the transparent foreground with the background giving the color value you are actually seeing.","title":"show_simulated_alpha_colors"},{"location":"usage/#selectors","text":"This shows the color scheme selectors that are responsible for applying the visible color and styles.","title":"selectors"},{"location":"usage/#file_paths","text":"Show the file paths of the color scheme and language file that are responsible for giving the styled appearance of your view. In the tooltip, you can click these links and open the responsible file directly in Sublime Text.","title":"file_paths"},{"location":"usage/#scope-highlighting","text":"When highlight_extent is enabled, this controls the visual style of the highlights. Due to the way the Sublime Text API for highlighting regions works, colors must be described as scope names from your color scheme file. Just define the scope to use and the supported style as shown below. /////////////////////////// // Highlight Configuration /////////////////////////// // Scope to use for the color \"highlight_scope\" : \"invalid\" , // Highlight style (underline|solid|outline|thin_underline|squiggly|stippled) \"highlight_style\" : \"outline\" ,","title":"Scope Highlighting"},{"location":"usage/#miscellaneous-options","text":"Lastly, there are a couple of other options: /////////////////////////// // Additional Options /////////////////////////// // Automatically copy scopes to clipboard \"clipboard\" : false , // Allow multi-select scope hunting \"multiselect\" : true , // Max region size to highlight \"highlight_max_size\" : 100 , // Use SubNotify plugin messages if installed \"use_sub_notify\" : true","title":"Miscellaneous Options"},{"location":"usage/#clipboard","text":"Auto-copies just the scope to the clipboard.","title":"clipboard"},{"location":"usage/#multiselect","text":"Allow displaying of the scope info for multiple cursor selections (does not work for show_statusbar as space is very limited).","title":"multiselect"},{"location":"usage/#highlgiht_max_size","text":"For performance, ScopeHunter is limited to highlight regions less that a given size. If a region is bigger than the defined limit, it will not be highlighted. You can control that limit here.","title":"highlgiht_max_size"},{"location":"usage/#use_sub_notify","text":"If you have the SubNotify installed, this will enable or disable messages through it.","title":"use_sub_notify"}]}